/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopfinal.gui;

import java.awt.Component;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import shopfinal.managers.ActionManager;
import shopfinal.managers.ActionManager.ActionParams;
import shopfinal.managers.ActionManager.Result;
import shopfinal.models.Employee;
import shopfinal.models.Goods;
import shopfinal.models.Provider;

public class AddOrdering extends javax.swing.JPanel {

    private final HashMap<String, Goods> goodsMap = new HashMap<String, Goods>();
    private final HashMap<String, Employee> employeeMap = new HashMap<String, Employee>();
    private final HashMap<String, Provider> providersMap = new HashMap<String, Provider>();
    /**
     * Creates new form FindById
     */
    public AddOrdering() {
        initComponents();
        addAvailableProviders();
        addAvailableGoods();
        addAvailableEmployees();
    }
    
    private void addAvailableEmployees() {
        try {
            Result result = ActionManager.getInstance().performAction(ActionManager.Action.GET_ALL_EMPLOYEES, null);
            availableEmployees.removeAllItems();
            ArrayList<Employee> employees = (ArrayList<Employee>) result.data;
            for (int i = 0; i < employees.size(); ++i) {
                Employee e = employees.get(i);
                if (!employeeMap.containsKey(e.pib)) {
                    employeeMap.put(e.pib, e);
                }
                availableEmployees.addItem(e.pib);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddOrdering.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void addAvailableGoods() {
        try {
            ActionParams params = new ActionParams();
            params.strValue1 = String.valueOf(availableProviders.getSelectedItem());
            Result result = ActionManager.getInstance().performAction(ActionManager.Action.GET_SELECTED_PROVIDER_GOODS, params);
            availableGoods.removeAllItems();
            ArrayList<Goods> goods = (ArrayList<Goods>) result.data;
            for (int i = 0; i < goods.size(); ++i) {
                String goodsName = goods.get(i).name;
                if (!goodsMap.containsKey(goodsName)) {
                    goodsMap.put(goodsName, goods.get(i));
                }
                availableGoods.addItem(goodsName);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddOrdering.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void addAvailableProviders() {
        try {
            Result result = ActionManager.getInstance().performAction(ActionManager.Action.GET_ALL_PROVIDERS, null);
            availableProviders.removeAllItems();
            ArrayList<Provider> providers = (ArrayList<Provider>) result.data;
            for (int i = 0; i < providers.size(); ++i) {
                Provider provider = providers.get(i);
                availableProviders.addItem(provider.name);
                providersMap.put(provider.name, provider);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddOrdering.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLayeredPane1 = new javax.swing.JLayeredPane();
        goodsLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        scroll = new javax.swing.JScrollPane();
        content = new javax.swing.JPanel();
        priceLabel = new javax.swing.JLabel();
        availableGoods = new javax.swing.JComboBox<>();
        okButton = new javax.swing.JButton();
        performButton = new javax.swing.JButton();
        numberLabel = new javax.swing.JLabel();
        number = new javax.swing.JTextField();
        availableEmployees = new javax.swing.JComboBox<>();
        providerLabel1 = new javax.swing.JLabel();
        showSelectedProviderGoods = new javax.swing.JButton();
        dateLabel1 = new javax.swing.JLabel();
        date = new javax.swing.JTextField();
        providerLabel2 = new javax.swing.JLabel();
        availableProviders = new javax.swing.JComboBox<>();

        setMaximumSize(new java.awt.Dimension(435, 600));
        setMinimumSize(new java.awt.Dimension(435, 600));
        setPreferredSize(new java.awt.Dimension(435, 600));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        goodsLabel.setText("Товар:");
        jLayeredPane1.add(goodsLabel);
        goodsLabel.setBounds(30, 180, 70, 20);
        goodsLabel.getAccessibleContext().setAccessibleName("id");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Додати замовлення");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLayeredPane1.add(jLabel2);
        jLabel2.setBounds(150, 10, 140, 20);

        price.setMinimumSize(new java.awt.Dimension(80, 20));
        price.setPreferredSize(new java.awt.Dimension(80, 20));
        jLayeredPane1.add(price);
        price.setBounds(120, 240, 100, 30);

        scroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        content.setLayout(new javax.swing.BoxLayout(content, javax.swing.BoxLayout.Y_AXIS));
        scroll.setViewportView(content);

        jLayeredPane1.add(scroll);
        scroll.setBounds(10, 280, 420, 170);

        priceLabel.setText("Ціна:");
        jLayeredPane1.add(priceLabel);
        priceLabel.setBounds(30, 240, 70, 30);

        availableGoods.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jLayeredPane1.add(availableGoods);
        availableGoods.setBounds(120, 180, 280, 20);

        okButton.setText("+");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(okButton);
        okButton.setBounds(370, 220, 50, 50);

        performButton.setText("Виконати");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${alignmentY}"), performButton, org.jdesktop.beansbinding.BeanProperty.create("alignmentY"));
        bindingGroup.addBinding(binding);

        performButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performButtonActionPerformed(evt);
            }
        });
        jLayeredPane1.add(performButton);
        performButton.setBounds(130, 460, 180, 30);

        numberLabel.setText("Кількість:");
        jLayeredPane1.add(numberLabel);
        numberLabel.setBounds(30, 210, 70, 30);

        number.setMinimumSize(new java.awt.Dimension(80, 20));
        number.setPreferredSize(new java.awt.Dimension(80, 20));
        jLayeredPane1.add(number);
        number.setBounds(120, 210, 100, 30);

        availableEmployees.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jLayeredPane1.add(availableEmployees);
        availableEmployees.setBounds(120, 80, 280, 20);

        providerLabel1.setText("Працівник:");
        jLayeredPane1.add(providerLabel1);
        providerLabel1.setBounds(20, 80, 90, 20);

        showSelectedProviderGoods.setText("Переглянути товари обраного постачальника");
        showSelectedProviderGoods.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSelectedProviderGoodsActionPerformed(evt);
            }
        });
        jLayeredPane1.add(showSelectedProviderGoods);
        showSelectedProviderGoods.setBounds(80, 140, 300, 23);

        dateLabel1.setText("Дата:");
        jLayeredPane1.add(dateLabel1);
        dateLabel1.setBounds(20, 40, 70, 30);

        date.setMinimumSize(new java.awt.Dimension(80, 20));
        date.setPreferredSize(new java.awt.Dimension(80, 20));
        jLayeredPane1.add(date);
        date.setBounds(100, 40, 100, 30);

        providerLabel2.setText("Постачальник:");
        jLayeredPane1.add(providerLabel2);
        providerLabel2.setBounds(20, 110, 90, 20);

        availableProviders.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jLayeredPane1.add(availableProviders);
        availableProviders.setBounds(120, 110, 280, 20);

        add(jLayeredPane1);

        getAccessibleContext().setAccessibleParent(this);

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    private void performButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performButtonActionPerformed
        ArrayList<Goods> goods = new ArrayList<Goods>();
        Component[] children = content.getComponents();
        for (int i = 0; i < children.length; ++i) {
            if (children[i].isVisible()) {
                GoodsPreviewItem item = (GoodsPreviewItem) children[i];
                if (item != null) {
                    Goods goodsItem = goodsMap.get(item.getLabelName());
                    goodsItem.numberInPurchase = item.getLabelNumber();
                    goodsItem.price = item.getLabelPrice();
                    goods.add(goodsItem);
                }
            }
        }
        
        ActionParams params = new ActionParams();
        String providerName = String.valueOf(availableProviders.getSelectedItem());
        params.dataArr = new Object[3];
        params.dataArr[0] = providersMap.get(providerName).id;
        String employeeName = String.valueOf(availableEmployees.getSelectedItem());
        params.dataArr[1] = employeeMap.get(employeeName).id;
        params.dataArr[2] = date.getText();
        params.data = goods;
        try {
            ActionManager.getInstance().performAction(ActionManager.Action.ADD_ORDERING, params);
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(AddOrdering.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_performButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        String goodsName = String.valueOf(availableGoods.getSelectedItem());
        Goods goodsItem = goodsMap.get(goodsName);
        if (price.getText() != null && !"".equals(price.getText())
            && number.getText() != null && !"".equals(number.getText())) {
            GoodsPreviewItem item = new GoodsPreviewItem();
            item.setLabelName(goodsItem.name);
            item.setLabelNumber(number.getText());
            item.setLabelPrice(price.getText());
            content.add(item);
            content.repaint();
            content.revalidate();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void showSelectedProviderGoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSelectedProviderGoodsActionPerformed
        addAvailableGoods();
    }//GEN-LAST:event_showSelectedProviderGoodsActionPerformed

    public int getPrice() {
        return Integer.parseInt(price.getText());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> availableEmployees;
    private javax.swing.JComboBox<String> availableGoods;
    private javax.swing.JComboBox<String> availableProviders;
    private javax.swing.JPanel content;
    private javax.swing.JTextField date;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JLabel goodsLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField number;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton performButton;
    private javax.swing.JTextField price;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel providerLabel1;
    private javax.swing.JLabel providerLabel2;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JButton showSelectedProviderGoods;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
